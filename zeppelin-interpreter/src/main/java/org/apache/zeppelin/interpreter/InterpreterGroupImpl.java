/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.zeppelin.interpreter;

import com.teragrep.zep_04.interpreter.InterpreterGroup;
import com.teragrep.zep_04.display.AngularObjectRegistry;
import com.teragrep.zep_04.interpreter.Interpreter;
import com.teragrep.zep_04.interpreter.InterpreterException;
import com.teragrep.zep_04.resource.ResourcePool;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.security.SecureRandom;
import java.util.concurrent.ConcurrentHashMap;

/**
 * InterpreterGroup is collections of interpreter sessions.
 * One session could include multiple interpreters.
 * For example spark, pyspark, sql interpreters are in the same 'spark' interpreter session.
 *
 * Remember, list of interpreters are dedicated to a session. Session could be shared across user
 * or notes, so the sessionId could be user or noteId or their combination.
 * So InterpreterGroup internally manages map of [sessionId(noteId, user, or
 * their combination), list of interpreters]
 *
 * A InterpreterGroup runs interpreter process while its subclass ManagedInterpreterGroup runs
 * in zeppelin server process.
 */
public class InterpreterGroupImpl implements InterpreterGroup {

  private static final Logger LOGGER = LoggerFactory.getLogger(InterpreterGroupImpl.class);

  protected String id;
  private String webUrl;
  // sessionId --> interpreters
  protected Map<String, List<Interpreter>> sessions = new ConcurrentHashMap<>();
  private AngularObjectRegistry angularObjectRegistry;
  private InterpreterHookRegistry hookRegistry;
  private ResourcePool resourcePool;
  private boolean angularRegistryPushed = false;

  /**
   * Create InterpreterGroup with given id, used in InterpreterProcess
   * @param id
   */
  public InterpreterGroupImpl(String id) {
    this.id = id;
  }

  /**
   * Create InterpreterGroup with autogenerated id
   */
  public InterpreterGroupImpl() {
    this.id = generateId();
  }

  private static String generateId() {
    return "InterpreterGroup_" + System.currentTimeMillis() + "_" + new SecureRandom().nextInt();
  }

  @Override
  public String getId() {
    return this.id;
  }

  @Override
  public String getWebUrl() {
    return webUrl;
  }

  @Override
  public void setWebUrl(String webUrl) {
    this.webUrl = webUrl;
  }

  //TODO(zjffdu) change it to getSession. For now just keep this method to reduce code change
  @Override
  public synchronized List<Interpreter> get(String sessionId) {
    return sessions.get(sessionId);
  }

  //TODO(zjffdu) change it to addSession. For now just keep this method to reduce code change
  @Override
  public synchronized void put(String sessionId, List<Interpreter> interpreters) {
    this.sessions.put(sessionId, interpreters);
  }

  @Override
  public synchronized void addInterpreterToSession(Interpreter interpreter, String sessionId) {
    LOGGER.debug("Add Interpreter {} to session {}", interpreter.getClassName(), sessionId);
    List<Interpreter> interpreters = get(sessionId);
    if (interpreters == null) {
      interpreters = new ArrayList<>();
    }
    interpreters.add(interpreter);
    put(sessionId, interpreters);
  }

  //TODO(zjffdu) rename it to a more proper name.
  //For now just keep this method to reduce code change
  @Override
  public Collection<List<Interpreter>> values() {
    return sessions.values();
  }

  @Override
  public AngularObjectRegistry getAngularObjectRegistry() {
    return angularObjectRegistry;
  }

  @Override
  public void setAngularObjectRegistry(AngularObjectRegistry angularObjectRegistry) {
    this.angularObjectRegistry = angularObjectRegistry;
  }

  @Override
  public InterpreterHookRegistry getInterpreterHookRegistry() {
    return hookRegistry;
  }

  @Override
  public void setInterpreterHookRegistry(InterpreterHookRegistry hookRegistry) {
    this.hookRegistry = hookRegistry;
  }

  @Override
  public int getSessionNum() {
    return sessions.size();
  }

  @Override
  public void setResourcePool(ResourcePool resourcePool) {
    this.resourcePool = resourcePool;
  }

  @Override
  public ResourcePool getResourcePool() {
    return resourcePool;
  }

  @Override
  public boolean isAngularRegistryPushed() {
    return angularRegistryPushed;
  }

  @Override
  public void setAngularRegistryPushed(boolean angularRegistryPushed) {
    this.angularRegistryPushed = angularRegistryPushed;
  }

  @Override
  public boolean isEmpty() {
    return sessions.isEmpty();
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof InterpreterGroupImpl)) {
      return false;
    }

    InterpreterGroupImpl that = (InterpreterGroupImpl) o;

    return id != null ? id.equals(that.id) : that.id == null;
  }

  @Override
  public int hashCode() {
    return id != null ? id.hashCode() : 0;
  }

  @Override
  public void close() {
    for (List<Interpreter> session : sessions.values()) {
      for (Interpreter interpreter : session) {
        try {
          interpreter.close();
          interpreter.getScheduler().stop();
        } catch (InterpreterException e) {
          LOGGER.warn("Fail to close interpreter: {}", interpreter.getClassName(), e);
        }
      }
    }
    sessions.clear();
  }
}
